apiVersion: v1
items:
- apiVersion: tekton.dev/v1beta1
  kind: Task
  metadata:
    annotations:
      openshift.io/installed-from: tektonhub
      tekton.dev/categories: CLI
      tekton.dev/displayName: Ansible Runner
      tekton.dev/pipelines.minVersion: 0.12.1
      tekton.dev/platforms: linux/amd64
      tekton.dev/tags: cli
    creationTimestamp: "2023-04-05T14:53:23Z"
    generation: 1
    labels:
      app.kubernetes.io/ansible-version: 2.12.5
      app.kubernetes.io/version: "0.2"
    name: ansible-runner
    namespace: koray
    resourceVersion: "6404991"
    uid: b4e7bb55-509b-46a2-bf04-a6b260bc478a
  spec:
    description: Task to run Ansible playbooks using Ansible Runner
    params:
    - default: project
      description: The project directory under the workspace runner-dir
      name: project-dir
      type: string
    - default:
      - --help
      description: The arguments to pass ansible-runner
      name: args
      type: array
    - default: /tekton/home
      description: Absolute path to the user's home directory.
      name: user-home
      type: string
    - default: quay.io/ansible/ansible-runner:stable-2.12-latest
      description: Ansible runner image.
      name: image
      type: string
    stepTemplate:
      env:
      - name: HOME
        value: $(params.user-home)
      name: ""
      resources: {}
    steps:
    - image: $(params.image)
      name: requirements
      resources: {}
      script: |
        #!/bin/bash
        set -e

        if [ -f requirements.txt ];
        then
          pip3 install --user \
            -r requirements.txt
        fi

        if [ -f  requirements.yml ];
        then
          ansible-galaxy role install -vv \
            -r requirements.yml
          ansible-galaxy collection install -vv \
            -r requirements.yml
        fi
      workingDir: $(workspaces.runner-dir.path)/$(params.project-dir)
    - args:
      - ansible-runner
      - run
      - $(params.args)
      - $(params.project-dir)
      command:
      - entrypoint
      image: $(params.image)
      name: run-playbook
      resources: {}
      workingDir: $(workspaces.runner-dir.path)
    workspaces:
    - description: The Ansibler runner directory
      name: runner-dir
- apiVersion: tekton.dev/v1beta1
  kind: Task
  metadata:
    annotations:
      openshift.io/installed-from: tektonhub
      tekton.dev/categories: Git
      tekton.dev/displayName: git clone
      tekton.dev/pipelines.minVersion: 0.38.0
      tekton.dev/platforms: linux/amd64,linux/s390x,linux/ppc64le,linux/arm64
      tekton.dev/tags: git
    creationTimestamp: "2023-04-05T14:58:28Z"
    generation: 1
    labels:
      app.kubernetes.io/version: "0.9"
    name: git-clone
    namespace: koray
    resourceVersion: "6412862"
    uid: 56aaa895-11f9-41d0-a918-04299a38ab84
  spec:
    description: |-
      These Tasks are Git tasks to work with repositories used by other tasks in your Pipeline.
      The git-clone Task will clone a repo from the provided url into the output Workspace. By default the repo will be cloned into the root of your Workspace. You can clone into a subdirectory by setting this Task's subdirectory param. This Task also supports sparse checkouts. To perform a sparse checkout, pass a list of comma separated directory patterns to this Task's sparseCheckoutDirectories param.
    params:
    - description: Repository URL to clone from.
      name: url
      type: string
    - default: ""
      description: Revision to checkout. (branch, tag, sha, ref, etc...)
      name: revision
      type: string
    - default: ""
      description: Refspec to fetch before checking out revision.
      name: refspec
      type: string
    - default: "true"
      description: Initialize and fetch git submodules.
      name: submodules
      type: string
    - default: "1"
      description: Perform a shallow clone, fetching only the most recent N commits.
      name: depth
      type: string
    - default: "true"
      description: Set the `http.sslVerify` global git config. Setting this to `false`
        is not advised unless you are sure that you trust your git remote.
      name: sslVerify
      type: string
    - default: ca-bundle.crt
      description: file name of mounted crt using ssl-ca-directory workspace. default
        value is ca-bundle.crt.
      name: crtFileName
      type: string
    - default: ""
      description: Subdirectory inside the `output` Workspace to clone the repo into.
      name: subdirectory
      type: string
    - default: ""
      description: Define the directory patterns to match or exclude when performing
        a sparse checkout.
      name: sparseCheckoutDirectories
      type: string
    - default: "true"
      description: Clean out the contents of the destination directory if it already
        exists before cloning.
      name: deleteExisting
      type: string
    - default: ""
      description: HTTP proxy server for non-SSL requests.
      name: httpProxy
      type: string
    - default: ""
      description: HTTPS proxy server for SSL requests.
      name: httpsProxy
      type: string
    - default: ""
      description: Opt out of proxying HTTP/HTTPS requests.
      name: noProxy
      type: string
    - default: "true"
      description: Log the commands that are executed during `git-clone`'s operation.
      name: verbose
      type: string
    - default: gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.40.2
      description: The image providing the git-init binary that this Task runs.
      name: gitInitImage
      type: string
    - default: /home/git
      description: |
        Absolute path to the user's home directory.
      name: userHome
      type: string
    results:
    - description: The precise commit SHA that was fetched by this Task.
      name: commit
      type: string
    - description: The precise URL that was fetched by this Task.
      name: url
      type: string
    - description: The epoch timestamp of the commit that was fetched by this Task.
      name: committer-date
      type: string
    steps:
    - env:
      - name: HOME
        value: $(params.userHome)
      - name: PARAM_URL
        value: $(params.url)
      - name: PARAM_REVISION
        value: $(params.revision)
      - name: PARAM_REFSPEC
        value: $(params.refspec)
      - name: PARAM_SUBMODULES
        value: $(params.submodules)
      - name: PARAM_DEPTH
        value: $(params.depth)
      - name: PARAM_SSL_VERIFY
        value: $(params.sslVerify)
      - name: PARAM_CRT_FILENAME
        value: $(params.crtFileName)
      - name: PARAM_SUBDIRECTORY
        value: $(params.subdirectory)
      - name: PARAM_DELETE_EXISTING
        value: $(params.deleteExisting)
      - name: PARAM_HTTP_PROXY
        value: $(params.httpProxy)
      - name: PARAM_HTTPS_PROXY
        value: $(params.httpsProxy)
      - name: PARAM_NO_PROXY
        value: $(params.noProxy)
      - name: PARAM_VERBOSE
        value: $(params.verbose)
      - name: PARAM_SPARSE_CHECKOUT_DIRECTORIES
        value: $(params.sparseCheckoutDirectories)
      - name: PARAM_USER_HOME
        value: $(params.userHome)
      - name: WORKSPACE_OUTPUT_PATH
        value: $(workspaces.output.path)
      - name: WORKSPACE_SSH_DIRECTORY_BOUND
        value: $(workspaces.ssh-directory.bound)
      - name: WORKSPACE_SSH_DIRECTORY_PATH
        value: $(workspaces.ssh-directory.path)
      - name: WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND
        value: $(workspaces.basic-auth.bound)
      - name: WORKSPACE_BASIC_AUTH_DIRECTORY_PATH
        value: $(workspaces.basic-auth.path)
      - name: WORKSPACE_SSL_CA_DIRECTORY_BOUND
        value: $(workspaces.ssl-ca-directory.bound)
      - name: WORKSPACE_SSL_CA_DIRECTORY_PATH
        value: $(workspaces.ssl-ca-directory.path)
      image: $(params.gitInitImage)
      name: clone
      resources: {}
      script: |
        #!/usr/bin/env sh
        set -eu

        if [ "${PARAM_VERBOSE}" = "true" ] ; then
          set -x
        fi

        if [ "${WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND}" = "true" ] ; then
          cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.git-credentials" "${PARAM_USER_HOME}/.git-credentials"
          cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.gitconfig" "${PARAM_USER_HOME}/.gitconfig"
          chmod 400 "${PARAM_USER_HOME}/.git-credentials"
          chmod 400 "${PARAM_USER_HOME}/.gitconfig"
        fi

        if [ "${WORKSPACE_SSH_DIRECTORY_BOUND}" = "true" ] ; then
          cp -R "${WORKSPACE_SSH_DIRECTORY_PATH}" "${PARAM_USER_HOME}"/.ssh
          chmod 700 "${PARAM_USER_HOME}"/.ssh
          chmod -R 400 "${PARAM_USER_HOME}"/.ssh/*
        fi

        if [ "${WORKSPACE_SSL_CA_DIRECTORY_BOUND}" = "true" ] ; then
           export GIT_SSL_CAPATH="${WORKSPACE_SSL_CA_DIRECTORY_PATH}"
           if [ "${PARAM_CRT_FILENAME}" != "" ] ; then
              export GIT_SSL_CAINFO="${WORKSPACE_SSL_CA_DIRECTORY_PATH}/${PARAM_CRT_FILENAME}"
           fi
        fi
        CHECKOUT_DIR="${WORKSPACE_OUTPUT_PATH}/${PARAM_SUBDIRECTORY}"

        cleandir() {
          # Delete any existing contents of the repo directory if it exists.
          #
          # We don't just "rm -rf ${CHECKOUT_DIR}" because ${CHECKOUT_DIR} might be "/"
          # or the root of a mounted volume.
          if [ -d "${CHECKOUT_DIR}" ] ; then
            # Delete non-hidden files and directories
            rm -rf "${CHECKOUT_DIR:?}"/*
            # Delete files and directories starting with . but excluding ..
            rm -rf "${CHECKOUT_DIR}"/.[!.]*
            # Delete files and directories starting with .. plus any other character
            rm -rf "${CHECKOUT_DIR}"/..?*
          fi
        }

        if [ "${PARAM_DELETE_EXISTING}" = "true" ] ; then
          cleandir || true
        fi

        test -z "${PARAM_HTTP_PROXY}" || export HTTP_PROXY="${PARAM_HTTP_PROXY}"
        test -z "${PARAM_HTTPS_PROXY}" || export HTTPS_PROXY="${PARAM_HTTPS_PROXY}"
        test -z "${PARAM_NO_PROXY}" || export NO_PROXY="${PARAM_NO_PROXY}"

        git config --global --add safe.directory "${WORKSPACE_OUTPUT_PATH}"
        /ko-app/git-init \
          -url="${PARAM_URL}" \
          -revision="${PARAM_REVISION}" \
          -refspec="${PARAM_REFSPEC}" \
          -path="${CHECKOUT_DIR}" \
          -sslVerify="${PARAM_SSL_VERIFY}" \
          -submodules="${PARAM_SUBMODULES}" \
          -depth="${PARAM_DEPTH}" \
          -sparseCheckoutDirectories="${PARAM_SPARSE_CHECKOUT_DIRECTORIES}"
        cd "${CHECKOUT_DIR}"
        RESULT_SHA="$(git rev-parse HEAD)"
        EXIT_CODE="$?"
        if [ "${EXIT_CODE}" != 0 ] ; then
          exit "${EXIT_CODE}"
        fi
        RESULT_COMMITTER_DATE="$(git log -1 --pretty=%ct)"
        printf "%s" "${RESULT_COMMITTER_DATE}" > "$(results.committer-date.path)"
        printf "%s" "${RESULT_SHA}" > "$(results.commit.path)"
        printf "%s" "${PARAM_URL}" > "$(results.url.path)"
      securityContext:
        runAsNonRoot: true
        runAsUser: 65532
    workspaces:
    - description: The git repo will be cloned onto the volume backing this Workspace.
      name: output
    - description: |
        A .ssh directory with private key, known_hosts, config, etc. Copied to
        the user's home before git commands are executed. Used to authenticate
        with the git remote when performing the clone. Binding a Secret to this
        Workspace is strongly recommended over other volume types.
      name: ssh-directory
      optional: true
    - description: |
        A Workspace containing a .gitconfig and .git-credentials file. These
        will be copied to the user's home before any git commands are run. Any
        other files in this Workspace are ignored. It is strongly recommended
        to use ssh-directory over basic-auth whenever possible and to bind a
        Secret to this Workspace over other volume types.
      name: basic-auth
      optional: true
    - description: |
        A workspace containing CA certificates, this will be used by Git to
        verify the peer with when fetching or pushing over HTTPS.
      name: ssl-ca-directory
      optional: true
- apiVersion: tekton.dev/v1beta1
  kind: Task
  metadata:
    annotations:
      openshift.io/installed-from: tektonhub
      tekton.dev/categories: Developer Tools
      tekton.dev/displayName: Write a file
      tekton.dev/pipelines.minVersion: 0.12.1
      tekton.dev/platforms: linux/amd64,linux/s390x,linux/ppc64le
      tekton.dev/tags: generic
    creationTimestamp: "2023-04-06T07:27:40Z"
    generation: 1
    labels:
      app.kubernetes.io/version: "0.1"
    name: write-file
    namespace: koray
    resourceVersion: "7964271"
    uid: f7475a06-e95b-499a-bf79-c03a2a377d3a
  spec:
    description: |-
      Write a file to a workspace
      This task can be used to write a file onto the output workspace. Use parameter expansion to insert variable content into the written file. It can also set specific permissions on the file.
    params:
    - description: |
        Relative path to create within the workspace. Directories will be created as necessary.
      name: path
      type: string
    - description: |
        Contents of the file to create.
      name: contents
      type: string
    - default: "0755"
      description: |
        chmod-style permission string to apply to the file. Note that octal numbers need quoting in YAML. Mode will not be applied to created directories.
      name: mode
      type: string
    steps:
    - env:
      - name: PARAM_PATH
        value: $(params.path)
      - name: PARAM_MODE
        value: $(params.mode)
      - name: PARAM_CONTENTS
        value: $(params.contents)
      image: docker.io/library/alpine:3.12@sha256:36553b10a4947067b9fbb7d532951066293a68eae893beba1d9235f7d11a20ad
      name: write-file
      resources: {}
      script: |
        #!/bin/sh
        set -eu
        DIRNAME=$(dirname "${PARAM_PATH}")
        mkdir -p "$DIRNAME"
        printf '%s' "${PARAM_CONTENTS}" > "./${PARAM_PATH}"
        chmod "${PARAM_MODE}" "./${PARAM_PATH}"
      workingDir: $(workspaces.output.path)
    workspaces:
    - description: Workspace onto which the file is written.
      name: output
- apiVersion: tekton.dev/v1beta1
  kind: Pipeline
  metadata:
    annotations:
      description: windows-customize pipeline provides functionality for windows VMs
        to e.g. install sql server, or install VS Code into windows VM. This pipeline
        can be reused for customizing Windows 10 and 11.
    creationTimestamp: "2023-04-03T13:53:16Z"
    generation: 48
    name: windows-customize
    namespace: koray
    resourceVersion: "21944123"
    uid: 56ebe53f-2b29-4ba2-82ec-7e38650777e5
  spec:
    finally:
    - name: cleanup-vm
      params:
      - name: vmName
        value: $(tasks.create-vm-from-template.results.name)
      - name: delete
        value: "true"
      taskRef:
        kind: ClusterTask
        name: cleanup-vm
      timeout: 10m0s
    - name: delete-template-customize
      params:
      - name: templateName
        value: $(params.customizeTemplateName)
      - name: templateNamespace
        value: $(tasks.copy-template-customize.results.namespace)
      - name: deleteTemplate
        value: "true"
      taskRef:
        kind: ClusterTask
        name: modify-vm-template
    - name: cleanup-ansible-resource
      params:
      - name: project-dir
        value: kubernetes
      - name: args
        value:
        - -pcleanup.yaml
      - name: user-home
        value: /workspace/runner-dir
      - name: image
        value: quay.io/ansible/ansible-runner:stable-2.12-latest
      taskRef:
        kind: Task
        name: ansible-runner
      workspaces:
      - name: runner-dir
        workspace: pipeline-artifacts
    params:
    - default: windows2k16-server-medium
      description: Name of the Template which is used to customize Windows and create
        a golden Template. The default boot source of this template needs to be available.
      name: sourceTemplateName
      type: string
    - default: koray
      description: Namespace of the Template which is used to customize Windows and
        create a golden Template. The default boot source of this template needs to
        be available.
      name: sourceTemplateNamespace
      type: string
    - default: sysprep-unattend.xml
      description: Name of the ConfigMap containing the customization and sysprep
        configuration files (unattend.xml, etc.). For example windows10-sqlserver
        or windows11-vs-code. It is possible to provide customize ConfigMaps created
        by the user too.
      name: customizeConfigMapName
      type: string
    - default: windows2k16-server-medium-custom
      description: Name of the customize Template which is created. A VM created from
        this template is used to customize Windows.
      name: customizeTemplateName
      type: string
    - default: "true"
      description: Allow to replace an already existing customize Template.
      name: allowReplaceCustomizationTemplate
      type: string
    - default: windows2k16-server-medium-golden
      description: Name of the golden Template which is created. Pre-installed Windows
        VMs can be created from this template.
      name: goldenTemplateName
      type: string
    - default: "true"
      description: Allow to replace an already existing golden Template.
      name: allowReplaceGoldenTemplate
      type: string
    - default: w2k16-v20200826
      description: Name of the PVC Name to use as the base image
      name: sourcePersistentVolumeClaimName
      type: string
    - default: 32Gi
      description: Size of the bootable Data Volume
      name: dataVolumeSize
      type: string
    - default: "5986"
      description: Service Port
      name: svcPort
      type: string
    - default: v20230409
      description: Tag of the container image
      name: imageTag
      type: string
    results:
    - description: Name of the created base DataVolume
      name: baseDvName
      value: $(tasks.create-base-dv.results.name)
    - description: Namespace of the created base DataVolume
      name: baseDvNamespace
      value: $(tasks.create-base-dv.results.namespace)
    - description: Name of the created golden Template
      name: goldenTemplateName
      value: $(tasks.copy-template-golden.results.name)
    - description: Namespace of the created golden Template
      name: goldenTemplateNamespace
      value: $(tasks.copy-template-golden.results.namespace)
    tasks:
    - name: copy-template-customize
      params:
      - name: sourceTemplateName
        value: $(params.sourceTemplateName)
      - name: sourceTemplateNamespace
        value: $(params.sourceTemplateNamespace)
      - name: targetTemplateName
        value: $(params.customizeTemplateName)
      - name: allowReplace
        value: $(params.allowReplaceCustomizationTemplate)
      taskRef:
        kind: ClusterTask
        name: copy-template
      timeout: 10m0s
    - name: modify-vm-template-customize
      params:
      - name: templateName
        value: $(tasks.copy-template-customize.results.name)
      - name: templateAnnotations
        value:
        - 'openshift.io/display-name: Microsoft Windows Customize VM'
        - 'description: Template for customizing Microsoft Windows.'
      - name: deleteDatavolumeTemplate
        value: "true"
      - name: datavolumeTemplates
        value:
        - "{\n  \"apiVersion\": \"cdi.kubevirt.io/v1beta1\",\n  \"kind\": \"DataVolume\",\n
          \ \"metadata\": {\n      \"name\": \"${NAME}\"\n  },\n  \"spec\": {\n    \"storage\":
          {\n      \"resources\": {\n        \"requests\": {\n          \"storage\":
          \"$(params.dataVolumeSize)\"\n        }\n      } \n    },\n    \"source\":
          {\n      \"pvc\": {\n        \"name\": \"$(params.sourcePersistentVolumeClaimName)\",\n
          \        \"namespace\": \"$(tasks.copy-template-customize.results.namespace)\"\n
          \      }\n    }\n  }\n}\n"
      - name: disks
        value:
        - '{"name": "rootdisk", "disk": {"bus": "virtio"}}'
        - '{"name": "sysprep", "cdrom": {"bus": "sata"}}'
      - name: volumes
        value:
        - '{"name": "rootdisk", "dataVolume": {"name": "${NAME}"}}'
        - '{"name": "sysprep", "sysprep": {"configMap": {"name": "$(params.customizeConfigMapName)"}}}'
      - name: templateNamespace
        value: ""
      runAfter:
      - copy-template-customize
      taskRef:
        kind: ClusterTask
        name: modify-vm-template
      timeout: 10m0s
    - name: create-vm-from-template
      params:
      - name: templateName
        value: $(tasks.modify-vm-template-customize.results.name)
      - name: runStrategy
        value: RerunOnFailure
      - name: startVM
        value: "true"
      runAfter:
      - modify-vm-template-customize
      taskRef:
        kind: ClusterTask
        name: create-vm-from-template
      timeout: 10m0s
    - name: wait-for-vmi-status-stopped
      params:
      - name: vmiName
        value: $(tasks.create-vm-from-template.results.name)
      - name: successCondition
        value: status.phase == Succeeded
      - name: failureCondition
        value: status.phase in (Failed, Unknown)
      runAfter:
      - deploy-application
      taskRef:
        kind: ClusterTask
        name: wait-for-vmi-status
      timeout: 2h0m0s
    - name: create-base-dv
      params:
      - name: manifest
        value: |
          apiVersion: cdi.kubevirt.io/v1beta1
          kind: DataVolume
          metadata:
            name: windows-base-$(params.imageTag)
            annotations:
              cdi.kubevirt.io/storage.bind.immediate.requested: \"true\"
              cdi.kubevirt.io/storage.deleteAfterCompletion: "false"
          spec:
            storage:
              resources:
                requests:
                  storage: $(params.dataVolumeSize)
            source:
              pvc:
                name: $(tasks.create-vm-from-template.results.name)
                namespace: $(tasks.create-vm-from-template.results.namespace)
      - name: waitForSuccess
        value: "true"
      runAfter:
      - wait-for-vmi-status-stopped
      taskRef:
        kind: ClusterTask
        name: modify-data-object
      timeout: 1h0m0s
    - name: copy-template-golden
      params:
      - name: sourceTemplateName
        value: $(params.sourceTemplateName)
      - name: sourceTemplateNamespace
        value: $(params.sourceTemplateNamespace)
      - name: targetTemplateName
        value: $(params.goldenTemplateName)
      - name: allowReplace
        value: $(params.allowReplaceGoldenTemplate)
      runAfter:
      - create-base-dv
      taskRef:
        kind: ClusterTask
        name: copy-template
      timeout: 30m0s
    - name: modify-vm-template-golden
      params:
      - name: templateName
        value: $(tasks.copy-template-golden.results.name)
      - name: templateAnnotations
        value:
        - 'openshift.io/display-name: Microsoft Windows Customized VM Golden'
        - 'description: Template for creating customized Microsoft Windows VMs.'
      - name: deleteDatavolumeTemplate
        value: "true"
      - name: datavolumeTemplates
        value:
        - |
          {
            "apiVersion": "cdi.kubevirt.io/v1beta1",
            "kind": "DataVolume",
            "metadata": {
                "name": "${NAME}"
            },
            "spec": {
              "storage": {
                "resources": {
                  "requests": {
                    "storage": "$(params.dataVolumeSize)"
                  }
                }
              },
              "source": {
                "pvc": {
                  "name": "$(tasks.create-base-dv.results.name)",
                  "namespace": "$(tasks.create-base-dv.results.namespace)"
                }
              }
            }
          }
      - name: deleteDisks
        value: "true"
      - name: disks
        value:
        - '{"name": "rootdisk", "disk": {"bus": "virtio"}}'
      - name: deleteVolumes
        value: "true"
      - name: volumes
        value:
        - '{"name": "rootdisk", "dataVolume": {"name": "${NAME}"}}'
      - name: deleteTemplateParameters
        value: "true"
      - name: templateParameters
        value:
        - '{"name": "NAME", "description": "VM name", "generate": "expression", "from":
          "windows-[a-z0-9]{6}"}'
      runAfter:
      - copy-template-golden
      taskRef:
        kind: ClusterTask
        name: modify-vm-template
      timeout: 10m0s
    - name: wait-for-vmi-status-running
      params:
      - name: vmiName
        value: $(tasks.create-vm-from-template.results.name)
      - name: vmiNamespace
        value: ""
      - name: successCondition
        value: status.phase == Running
      - name: failureCondition
        value: status.phase in (Failed, Unknown)
      runAfter:
      - create-vm-from-template
      taskRef:
        kind: ClusterTask
        name: wait-for-vmi-status
    - name: create-service
      params:
      - name: project-dir
        value: kubernetes
      - name: args
        value:
        - -pcreate-service.yml
      - name: user-home
        value: /workspace/runner-dir
      - name: image
        value: quay.io/ansible/ansible-runner:stable-2.12-latest
      runAfter:
      - wait-for-vmi-status-running
      - generate-ansible-variables
      - create-ansible-inventory
      taskRef:
        kind: Task
        name: ansible-runner
      workspaces:
      - name: runner-dir
        workspace: pipeline-artifacts
    - name: download-ansible-playbooks
      params:
      - name: url
        value: https://github.com/kseremet/tektoncd-ansible-runner.git
      - name: revision
        value: master
      - name: refspec
        value: ""
      - name: submodules
        value: "true"
      - name: depth
        value: "1"
      - name: sslVerify
        value: "true"
      - name: crtFileName
        value: ca-bundle.crt
      - name: subdirectory
        value: ""
      - name: sparseCheckoutDirectories
        value: ""
      - name: deleteExisting
        value: "true"
      - name: httpProxy
        value: ""
      - name: httpsProxy
        value: ""
      - name: noProxy
        value: ""
      - name: verbose
        value: "true"
      - name: gitInitImage
        value: gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.40.2
      - name: userHome
        value: /home/git
      runAfter:
      - create-vm-from-template
      taskRef:
        kind: Task
        name: git-clone
      workspaces:
      - name: output
        workspace: pipeline-artifacts
    - name: generate-ansible-variables
      params:
      - name: path
        value: ./kubernetes/env/extravars
      - name: contents
        value: |
          ---
          service_name: $(tasks.create-vm-from-template.results.name)
          namespace: $(tasks.create-vm-from-template.results.namespace)
          service_selector_label_value: $(tasks.create-vm-from-template.results.name)
          service_port: $(params.svcPort)
          vm_name: $(tasks.create-vm-from-template.results.name)
          pvc_name: windows-base-$(params.imageTag)
          pipelinerun_uid: $(context.pipelineRun.uid)
      - name: mode
        value: "0755"
      runAfter:
      - download-ansible-playbooks
      taskRef:
        kind: Task
        name: write-file
      workspaces:
      - name: output
        workspace: pipeline-artifacts
    - name: create-ansible-inventory
      params:
      - name: path
        value: ./kubernetes/inventory/hosts.yaml
      - name: contents
        value: |
          ---
          all:
            hosts:
              $(tasks.create-vm-from-template.results.name):
                ansible_user: Administrator
                ansible_password: qazxsw56=
                ansible_connection: winrm
                ansible_winrm_server_cert_validation: ignore
      - name: mode
        value: "0755"
      runAfter:
      - download-ansible-playbooks
      taskRef:
        kind: Task
        name: write-file
      workspaces:
      - name: output
        workspace: pipeline-artifacts
    - name: deploy-application
      params:
      - name: project-dir
        value: kubernetes
      - name: args
        value:
        - -pdeploy_application.yaml
      - name: user-home
        value: /workspace/runner-dir
      - name: image
        value: quay.io/ansible/ansible-runner:stable-2.12-latest
      runAfter:
      - create-service
      taskRef:
        kind: Task
        name: ansible-runner
      workspaces:
      - name: runner-dir
        workspace: pipeline-artifacts
    - name: export-vm-disk
      params:
      - name: project-dir
        value: kubernetes
      - name: args
        value:
        - -pexport_vm_disk.yaml
      - name: user-home
        value: /workspace/runner-dir
      - name: image
        value: quay.io/ansible/ansible-runner:stable-2.12-latest
      runAfter:
      - modify-vm-template-golden
      - generate-dockerfile
      - copy-template-golden
      taskRef:
        kind: Task
        name: ansible-runner
      workspaces:
      - name: runner-dir
        workspace: pipeline-artifacts
    - name: generate-dockerfile
      params:
      - name: path
        value: ./files/Dockerfile
      - name: contents
        value: |-
          FROM scratch
          ADD --chown=107:107 disk.qcow2 /disk/
      - name: mode
        value: "0755"
      runAfter:
      - copy-template-golden
      taskRef:
        kind: Task
        name: write-file
      workspaces:
      - name: output
        workspace: pipeline-artifacts
    - name: build-containerdisk
      params:
      - name: IMAGE
        value: image-registry.openshift-image-registry.svc:5000/koray/w2k16-container-disk:$(params.imageTag)
      - name: BUILDER_IMAGE
        value: registry.redhat.io/rhel8/buildah@sha256:ac0b8714cc260c94435cab46fe41b3de0ccbc3d93e38c395fa9d52ac49e521fe
      - name: STORAGE_DRIVER
        value: vfs
      - name: DOCKERFILE
        value: ./files/Dockerfile
      - name: CONTEXT
        value: ./files
      - name: TLSVERIFY
        value: "true"
      - name: FORMAT
        value: oci
      - name: BUILD_EXTRA_ARGS
        value: ""
      - name: PUSH_EXTRA_ARGS
        value: ""
      - name: SKIP_PUSH
        value: "false"
      runAfter:
      - export-vm-disk
      taskRef:
        kind: ClusterTask
        name: buildah
      workspaces:
      - name: source
        workspace: pipeline-artifacts
    workspaces:
    - name: pipeline-artifacts
kind: List
metadata:
  resourceVersion: ""
